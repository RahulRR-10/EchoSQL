import React, { useState } from "react";
import { motion } from "framer-motion";

const NLReportGenerator = ({ sessionData, databaseId }) => {
  const [report, setReport] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [reportType, setReportType] = useState("executive");

  const generateReport = async () => {
    setIsGenerating(true);

    try {
      const response = await fetch("/api/v1/generate-nl-report", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          sessionData,
          databaseId,
          reportType,
          includeVisualizations: true,
          includeRecommendations: true,
        }),
      });

      const reportData = await response.json();
      setReport(reportData);
    } catch (error) {
      console.error("Failed to generate report:", error);
    } finally {
      setIsGenerating(false);
    }
  };

  const downloadReport = () => {
    if (!report) return;

    const reportContent = `
# ${report.title}
*Generated on ${new Date().toLocaleDateString()}*

## Executive Summary
${report.executive_summary}

## Key Findings
${report.key_findings.map((finding) => `â€¢ ${finding}`).join("\n")}

## Detailed Analysis
${report.detailed_analysis}

## Recommendations
${report.recommendations.map((rec) => `â€¢ ${rec}`).join("\n")}

## Data Insights
${report.data_insights}

---
*Report generated by EchoSQL AI*
    `;

    const blob = new Blob([reportContent], { type: "text/markdown" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${report.title.replace(/\s+/g, "_")}_Report.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <motion.div className="nl-report-generator bg-gradient-to-br from-gray-800 to-gray-900 rounded-xl p-6 border border-gray-700">
      <h3 className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-green-400 to-cyan-400 mb-6">
        ðŸ“„ AI Report Generator
      </h3>

      <div className="mb-6">
        <label className="block text-gray-300 text-sm font-medium mb-2">
          Report Type
        </label>
        <select
          value={reportType}
          onChange={(e) => setReportType(e.target.value)}
          className="bg-gray-700 border border-gray-600 text-white rounded-lg px-4 py-2 w-full"
        >
          <option value="executive">Executive Summary</option>
          <option value="technical">Technical Analysis</option>
          <option value="business">Business Intelligence</option>
          <option value="financial">Financial Report</option>
          <option value="operational">Operational Insights</option>
        </select>
      </div>

      <motion.button
        onClick={generateReport}
        disabled={isGenerating}
        className="w-full bg-gradient-to-r from-green-500 to-cyan-500 text-white font-bold py-3 px-6 rounded-lg hover:from-green-600 hover:to-cyan-600 transition-all duration-300 disabled:opacity-50"
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
      >
        {isGenerating ? (
          <div className="flex items-center justify-center">
            <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
            Generating AI Report...
          </div>
        ) : (
          "ðŸš€ Generate Comprehensive Report"
        )}
      </motion.button>

      {report && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mt-6 bg-gray-700 rounded-lg p-6"
        >
          <div className="flex justify-between items-center mb-4">
            <h4 className="text-xl font-bold text-cyan-400">{report.title}</h4>
            <button
              onClick={downloadReport}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm transition-colors"
            >
              ðŸ“¥ Download
            </button>
          </div>

          <div className="space-y-4 text-gray-300">
            <div>
              <h5 className="font-semibold text-green-400 mb-2">
                Executive Summary
              </h5>
              <p className="text-sm leading-relaxed">
                {report.executive_summary}
              </p>
            </div>

            <div>
              <h5 className="font-semibold text-cyan-400 mb-2">Key Findings</h5>
              <ul className="text-sm space-y-1">
                {report.key_findings.map((finding, index) => (
                  <li key={index} className="flex items-start">
                    <span className="text-green-400 mr-2">â€¢</span>
                    {finding}
                  </li>
                ))}
              </ul>
            </div>

            <div>
              <h5 className="font-semibold text-yellow-400 mb-2">
                Recommendations
              </h5>
              <ul className="text-sm space-y-1">
                {report.recommendations.map((rec, index) => (
                  <li key={index} className="flex items-start">
                    <span className="text-yellow-400 mr-2">â†’</span>
                    {rec}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </motion.div>
      )}
    </motion.div>
  );
};

export default NLReportGenerator;
